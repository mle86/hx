#!/usr/bin/perl
use strict;

my $c_bold = '[1m';
my $c_unbold = '[22m';
my $c_faint = '[2m';
my $c_unfaint = '[22m';
my $c0 = '[0m';

my $c_sym = '[33m';
my $c_contsym = '[38;2;113;97;25m';
my $c_meta = '[38;2;114;204;204m';
my $c_date = $c_sym;
my $c_host = $c_sym;
my $c_app = $c_sym;
my $c_loglevel = $c_sym;
my $c_loglevel_warn = '[38;5;220m';
my $c_loglevel_err = '[38;2;255;145;36m';
my $c_info = '[38;5;243m';
my $c_info_prefix = '[38;2;125;117;83m';
my $c_trace = $c_info;
my $c_stack = $c_info;
my $c_stack_msg = $c0;
my $c_rpt = '[34m';
my $c_exception_fqcn = $c_unbold;
my $c_exception_scn  = $c_bold;
my $c_exception_code = $c_bold;
my $c_exception0 = $c_unbold;
my $c_message = $c0;

my $re_json_number     = '\\s*-?\\d+(?:\\.\\d+)?(?:[eE][\\-\\+]?\\d+)?\\s*';
my $re_json_const      = '\\s*(?:null|true|false)\\s*';
my $re_json_string     = '(?<jstr0>\\s*")(?<jstr>(?:\\\\.|[^"\\\\]+)*+)(?<jstr1>"\\s*)';
my $re_json_array      = "\\s*\\[(?:(?&json)(?:,(?&json))*|\\s*)\\]\\s*";
my $re_json_object     = "\\s*\\{(?:$re_json_string:(?&json)(?:,$re_json_string:(?&json))*|\\s*)?\\}\\s*";
my $re_json            = "(?<json>$re_json_number|$re_json_const|$re_json_string|$re_json_array|$re_json_object)";
my $re_lineno  = '(?::\\d+|\(\d+\)| on line \d+)';
my $re_loglevel = '(?:(?:PHP )?(?i:warn|warning|warnung|err|error|fehler|info|information|note|notice|hinweis|crit|critical|schwerwiegend|emerg|emergency|debug|dbg|alrt|alert|parse error|fatal error))';

my $re_nsname = '(?:\\\\?(?:[A-Za-z]\w*\\\\)+)';
my $re_classname = "(?:$re_nsname?[A-Za-z]\\w+)";
my $re_fnname = '(?:[A-Za-z_]\\w*|\\{closure\\})';
my $re_fnprefix = '(?:->|::)';
my $re_fncall = "(?:(?<class>${re_nsname}(?=\{)|${re_classname}(?=${re_fnprefix})|${re_classname}::${re_nsname})?(?<fnp>${re_fnprefix})?(?<fn>${re_fnname})(?<args> ?\\(.*\\)))";

my $re_fqcn = '(?:(?:[A-Za-z][A-Za-z0-9_]+\\\\)+[A-Za-z][A-Za-z0-9_]*\b)';  # fqcn must contain backslashes
my $re_excn = '(?:[A-Z][A-Za-z0-9_]*(?:[Ee]xception|[Ee]rror)|ExceptionStack)';  # short exception class name must end in "exception" or "error"
my $re_ex_code = '(?:\\/\\d+|\\(code:? \\d+\\))';
my $re_exception = "(?:(?:$re_fqcn|$re_excn)$re_ex_code?)";

my $re_abspath = '(?:/[a-z]+[a-z0-9]+(?:/[a-zA-Z0-9\\-_\\.$]+)+)';
my $re_relpath = '(?:(?:[A-Za-z0-9\\-_\\.$]+/)*[A-Za-z0-9\\-_\\.$]+)';
my $re_path    = "(?:$re_abspath|$re_relpath)";

my $linestart     = "${c_sym}●${c0} ";
my $metalinestart = "${c_meta}●${c0} ";
my $contlinestart = "${c_contsym}●${c0} ";

sub format_date ($) { $c_date . $_[0] . $c0 }
sub format_host ($) { $c_host . $_[0] . $c0 }
sub format_message ($) { $c_message . $_[0] . $c0 }
sub format_app  ($) { $c_app  . $_[0] . $c0 }
sub format_rpt ($) { $c_rpt . $_[0] . $c0 }
sub format_meta ($) { $c_meta . $_[0] . $c0 }

my %http_success        = map{$_=>1} (200 .. 299);
my %http_redir          = map{$_=>1} (300 .. 399, 100 .. 199);
my %http_client_error   = map{$_=>1} (400, 404, 405, 407, 408, 410, 411, 413, 414, 415, 429, 431);
my %http_client_failure = map{$_=>1} (401, 402, 403, 406, 409, 412, 416, 417, 420, 421, 422, 423, 424, 426, 428, 451);
my %http_server_error   = map{$_=>1} (500 .. 599);

my $c_http_success        = '[38;2;98;214;113m';
my $c_http_redir          = '[38;2;202;214;98m';
my $c_http_client_error   = '[38;2;155;72;72m';
my $c_http_client_failure = '[38;2;235;41;41m';
my $c_http_server_error   = '[38;5;199;1m';

sub _format_tracefile ($$) {
	my ($file, $lineno) = (@_);
	my ($c_hi, $c_lo) = ($c_bold, $c_unbold);
	my $include_lineno_in_bold = ($lineno !~ m/(?:on line|in line)/);

	$c_hi . $file .
	(($include_lineno_in_bold)
		? $lineno . $c_lo
		: $c_lo . $lineno)
}

sub format_exception ($) {
	my ($in) = @_;
	my ($prefix, $suffix) = ('', '');
	if ($in =~ s/^((?:[^\\]+\\)+)//) { $prefix = $c_exception_fqcn . $1; }
	if ($in =~ s/(\/\d+)$//) { $suffix = $c_exception_code . $1; }
	$prefix . $c_exception_scn . $in . $suffix . $c_exception0
}

sub format_trace ($;$) {
	my ($out, $c_base) = ($_[0], ($_[1] // $c_trace));
	my ($c_hi, $c_lo) = ($c_bold, $c_unbold);

	$out =~ s/\b([\w\-\.\$]+)($re_lineno)?(,|\)|\s*$)/ _format_tracefile($1, $2) . $3 /ge;

	$c_base . $out . $c0
}

sub format_fncall ($) {
	my ($out) = ($_[0]);
	my ($c_hi, $c_lo) = ($c_bold, $c_unbold);

	$out =~ s#$re_fncall# $+{'class'} . $+{'fnp'} . $c_hi . $+{'fn'}.$+{'fn2'} . $c_lo . format_info( $+{'args'} ) #gem;

	$out
}

sub format_json ($;$) {
	my ($out, $in, $c_json) = ('', $_[0], ($_[1] // $c_info));
	my ($c_hi, $c_lo) = ($c_bold, $c_unbold);

	while ($in ne '') {
		if ($in =~ s/^$re_json_string(?<rest>\s*:\s*)//) {
			$out .= $+{'jstr0'} . $c_hi . $+{'jstr'} . $c_lo . $+{'jstr1'} . $+{'rest'};
		} elsif ($in =~ s/^($re_json_string|[^\\"]+)//) {
			$out .= $1;
		}
	}

	if ($out =~ m/^(\s*\{)(.+)(\}\s*)\s*$/) {
		$out = $c_hi . $1 . $c_lo . $2 . $c_hi . $3 . $c_lo;
	}

	$c_json . $out . $c0
}

sub format_http ($) {
	my $status = $_[0];
	my $c_http = '';
	if    (exists($http_client_error{$status}))   { $c_http = $c_http_client_error }
	elsif (exists($http_client_failure{$status})) { $c_http = $c_http_client_failure }
	elsif (exists($http_server_error{$status}))   { $c_http = $c_http_server_error }
	elsif (exists($http_success{$status}))        { $c_http = $c_http_success }
	elsif (exists($http_redir{$status}))          { $c_http = $c_http_redir }
	return $c_http . $status . $c0;
}

sub format_info ($;$) {
	my ($in, $c_info) = ($_[0], $_[1] // $c_info);
	if ($in =~ m/^( *\[)(\d\d\d)(\])$/ && ($2 >= 100 && $2 <= 599)) {
		return $c_info . $1 . format_http($2) . $c_info . $3 . $c0;
	}
	$c_info . $in . $c0
}

sub format_info_prefix ($) {
	format_info($_[0], $c_info_prefix)
}

sub format_loglevel ($) {
	my ($color, $msg) = ($c_loglevel, $_[0]);
	if    ($msg =~ m/\b(?:warn|warning|warnung)\b/i) { $color = $c_loglevel_warn }
	elsif ($msg =~ m/\b(?:err|error|errors|fehler|crit|critical|schwerwiegend|alrt|alert|emerg|emergency)\b/i) { $color = $c_loglevel_err }
	return $color . $msg . $c0
}

sub format_stack ($) {
	my ($in) = ($_[0]);
	my $re_exc_msg = "($re_exception)(?:(: )(.*?)(?=\\)\$|; ))?";

	my $stack_contains_more_than_one_exception = ($in =~ m/; $re_exception/);
	my $fmt_stack_msg = ($stack_contains_more_than_one_exception)
		# More than one msg in stack? format them each in the default message color for simpler reading.
		? sub($) { format_message($_[0]) . $c_stack }
		# Only one msg in stack? Keep it in the faint $c_stack==$c_info color, the merged message is already msg-formatted.
		: sub($) { $_[0] };

	$in =~ s/(?<=stack: )$re_exc_msg/ format_exception($1) . $2 . &$fmt_stack_msg($3) /e;
	$in =~ s/(?<=; )$re_exc_msg/      format_exception($1) . $2 . &$fmt_stack_msg($3) /ge;
	$c_stack . $in . $c0
}

while (<>) {
	# every non-empty line is a full log line.
	if (m/^\s*$/) {
		print ; next
	}

	if (s/^(==+> +)($re_path)( +<==+\s*$)//) {
		# `tail` file header
		print $metalinestart;
		print format_meta($1);
		print format_trace($2, $c_meta);
		print format_meta($3);
		next;
	}

	my $is_apache;
	my $is_dmesg;
	my $is_continuation_line = (m/^\s*(?:#\d+\b|URI:|Referr?er:|User-?[Aa]gent:|Stack trace:$|CLI:|  thrown in | {16,})/);
	if ($is_continuation_line) {
		print $contlinestart;
	} else {
		print $linestart;
	}

	my $suffix = '';
	my ($message_isolated, $loglevel_isolated, $exception_isolated, $text_isolated);

	# The start is probably the timestamp:
	my $re_time   = '(?:\d\d:\d\d:\d\d)';
	my $re_ms     = '(?:[\.,]\d{1,6})';
	my $re_ddd    = '(?:[A-Za-z]{2,3} +\d+)';
	my $re_ymd    = '(?:\d\d\d\d-\d\d-\d\d|\d\d\d\d\.\d\d\.\d\d)';
	my $re_tz     = '(?:[\+\-]\d\d(?::?\d\d)?|Z)';
	my $re_ts8601 = "(?:${re_ymd}T${re_time}${re_ms}?(?:$re_tz)?)";  # 2019-07-07T18:22:34.001Z
	my $re_tsw    = "(?:\\d{1,2}-\\w{2,4}-\\d{4} ${re_time}${re_ms}?)";  # 07-Jun-2019 11:36:20.106
	my $re_host   = '[A-Za-z][A-Za-z0-9_\-\.]+';
	my $re_host   = '(?:[A-Za-z][A-Za-z0-9_\-\.]+)';
	my $re_app    = '(?:[A-Za-z/][A-Za-z0-9_\-\./]+?(?:\[\d+\]|\])?)';
	my $re_word   = '(?:[A-Z][a-z]+)';
	my $re_ip     = '(?:\[(?:[0-9a-fA-F]{1,4})?(?:::?[0-9a-fA-F]{1,4}){1,7}\]|(?:[0-9a-fA-F]{1,4})?(?:::?[0-9a-fA-F]{1,4}){1,7}|\d{1,3}(?:\.\d{1,3}){3})';
	my $re_client = "(?:$re_ip|$re_host)";
	my $re_mysqld = '(?:(?:\\/usr\\/sbin\\/)?mysqld: )';
	my $re_a2date = "(?:\\[ ?\\d{1,2}/\\w{3}/\\d{4}[ :T]$re_time(?: ?$re_tz)?\\])";
	my $re_a2clnt = "(?:(?:\\[(?:client )?$re_client(?::\\d+)?\\]))";
	my $re_a2err  = '(?:AH\d+)';
	my $re_dmesg_ts  = "(?:\\[\\d+${re_ms}?\\])";
	my $re_dmesg_app = '(?:[A-Za-z0-9][\\w\\-\\.]*(?: [\\w\\-\\.:]+)?)';
	if (s/^($re_ddd {1,2}$re_time) ($re_host) ($re_app)(: *)//) {
		# syslog format
		print format_date($1) . ' ';
		print format_host($2) . ' ';
		print format_app($3 . $4) . '';
		$message_isolated = 1;
	} elsif (s/^(\[$re_ymd $re_time\]) ($re_app)(\.[A-Z]+)?(: *)//) {
		# symfony format
		print format_date($1) . ' ';
		print format_app($2);
		print format_loglevel($3 . $4);
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^(\[$re_word $re_word \d+ $re_time$re_ms? \d{4}\]) +(\[\w*:\w+\]) +(\[(?:pid )?\d+(?:[,:]tid \d+)?\]) +($re_a2clnt )?//) {
		# Apache2 error format
		print format_date($1) . ' ';
		print format_loglevel($2) . ' ';
		print format_app($3) . ' ';
		print format_info_prefix($4)  if $4;
		$is_apache = 1;
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^(?<vh>$re_client(?::\d+)?) (?<cl>$re_client|-) (?<id>\S+) (?<un>\S+) (?<ts>$re_a2date) (?=")// ||
	         s/^(?<cl>$re_client|-) (?<id>\S+) (?<un>\S+) (?<ts>$re_a2date) (?=")//) {
		# Apache2 custom format
		print format_host($+{'vh'}) . ' '  if $+{'vh'};
		print format_info_prefix($+{'cl'}) . ' ';  # client addr/hostname
		print format_info_prefix($+{'id'}) . ' ';  # identd logname
		print format_info_prefix($+{'un'}) . ' ';  # http basic username
		print format_date($+{'ts'}) . ' ';
		$is_apache = 1;
		$message_isolated = 1;
	} elsif (s/^($re_ts8601) (\d+) (\[\w+\]) ($re_mysqld)?// ||
		 s/^(${re_ymd} ${re_time}) (\d+) (\[\w+\]) ($re_mysqld)?//) {
		# mysqld error:
		print format_date($1) . ' ';
		print format_info_prefix($2) . ' ';
		print format_loglevel($3) . ' ';
		print format_app($4)  if $4;
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^($re_dmesg_ts) ($re_dmesg_app:|\[$re_dmesg_app\])( |$)//) {
		# dmesg
		print format_date($1) . ' ';
		print format_app($2) . $3;
		$message_isolated = 1;
		$is_dmesg = 1;
	} elsif (s/^($re_dmesg_ts) //) {
		# dmesg (other)
		print format_date($1) . ' ';
		$is_dmesg = 1;
	} elsif (s/^(Next) ($re_exception)(: )//) {
		# Euv continuation:
		print format_date($1) . ' ';
		print format_exception($2) . '';
		print $3;
		$message_isolated = 1;
	} elsif (s/^(PHP Fatal error: )( ?Uncaught )($re_exception)//) {
		print format_app($1);
		print $2;
		print format_exception($3);
		$message_isolated = 1;
	} elsif (s/^($re_ymd $re_time(?:,\d+)?:)($re_loglevel:)([^:]+:)//) {
		# LetsEncrypt/certbot
		print format_date($1);
		print format_loglevel($2);
		print format_app($3);
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^($re_ymd $re_time(?:,\d+)?)( - )(\w[^\[]*)(\[$re_loglevel\]: )//) {
		# cloud-init
		print format_date($1 . $2);
		print format_app($3);
		print format_loglevel($4);
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^($re_ymd $re_time$re_ms?|$re_ts8601|$re_tsw|\[$re_ymd $re_time$re_ms?\])( |:|$)//) {
		print format_date($1 . $2);
		$message_isolated = 1;
	}

	if ($is_dmesg && s/^((-{3,}) ?[\[\(].+[\]\)] ?-{3,}\s*)//) {
		print format_info($1);
	} elsif (s/^(message repeated \d+ times: \[)(\s*)//) {
		print format_rpt($1);
		print $2;
		if (s/(\s*\]\s*)$//) {
			$suffix = format_rpt($1) . $suffix;
		}
	}

	if ($message_isolated && !$loglevel_isolated && s/^(<$re_loglevel>  ?|$re_loglevel:  ?)//) {
		print format_loglevel($1);
		$loglevel_isolated = 1;
	} elsif ($message_isolated && !$loglevel_isolated && s/^($re_loglevel) (\[\S+\]) ([a-z]+(?:\.\w+)+ )?//) {
		# LOGLEVEL [component] org.java.classname
		print format_loglevel($1) . ' ';
		print format_app($2) . ' ';
		print format_info_prefix($3)  if $3;
		$loglevel_isolated = 1;
	} elsif ($message_isolated && !$loglevel_isolated && s/^($re_loglevel) (\($re_path$re_lineno?\): )//) {
		# LOGLEVEL (FILENAME.PY:LINENO):
		print format_loglevel($1) . ' ';
		print format_info_prefix($2);
		$loglevel_isolated = 1;
	}

	my $re_info_brackets = '(?:\\[[^\\]]+\\])';
	if ($message_isolated && s/^($re_info_brackets(?: +$re_info_brackets)*)( *)//) {
		print format_info_prefix($1);
		print $2;
	}

	if ($message_isolated && !$loglevel_isolated && s/^(<$re_loglevel>  ?|$re_loglevel:  ?)//) {
		print format_loglevel($1);
		$loglevel_isolated = 1;
	}

	if ($message_isolated && s/^( *(?:PHP Fatal error:  ?)?(?:Uncaught )?)($re_exception)(: +)//) {
		print $1;
		print format_exception($2);
		print $3;
		$exception_isolated = 1;
	}

	if ($message_isolated && $is_apache && s/^($re_a2err:) //) {
		# apache2: "AH01620: Could not open..."
		print format_exception($1) . ' ';
		$exception_isolated = 1;
	} elsif ($message_isolated && $is_apache && s/^((?:\(\d+\))?\w+(?: \w+)*: )($re_a2clnt )?($re_a2err:) //) {
		# apache2: "(13)Permission denied: [client 00.000.000.00:0000] AH01620: Could not open..."
		print $1;
		print $2  if $2;
		print format_exception($3) . ' ';
		$exception_isolated = 1;
	}

#	if ($message_isolated && s/^(?:($re_info_brackets +)+)//) {
#		print format_info($1);
#	}

	if ($message_isolated && s#^(.+?)(  ?\(stack: .+\))?( \($re_exception (?:@|at|in) $re_path$re_lineno?\))##) {
		# AEH format
		my ($message, $stack, $rest, $info) = ($1, $2, $3, undef);
		if ($message =~ s/((?: $re_info_brackets)+)$//) { $info = $1; }
		print format_message($message);
		print format_info($info)  if $info;
		print format_stack($stack)  if $stack;
		print format_trace($rest);
		$text_isolated = 1;
	} elsif ($message_isolated && s#^(.+?)( (?:in|at) $re_abspath(?:$re_lineno)?\b)(\s*$)##) {
		# "MESSAGE in FILE:LINE" format
		print format_message($1);
		print format_trace($2);
		print $3;
		$text_isolated = 1;
	} elsif ($message_isolated && s#^(.+?)(?:(  ?)($re_info_brackets))?(  ?(?:in|at) $re_abspath(?:$re_lineno)?\b {1,2})(?=[\(\[])##) {
		# mini-api format
		print format_message($1);
		print $2 . format_info($3);
		print format_trace($4);
		print $5;
		$text_isolated = 1;
	} elsif ($message_isolated && s#("[A-Z]\w* [^"]+?") (\d+)( .*)$##) {
		# Apache2 log
		print format_message($1) . ' ';
		print format_http($2);
		print format_info($3);
		$text_isolated = 1;
	}


	if ($is_continuation_line && s/^(#\d+ )?($re_abspath(?:$re_lineno)?)(: )($re_fncall)//) {
		print format_info($1)  if $1;
		print format_trace($2) . $3 . format_fncall($4);
	} elsif ($is_continuation_line) {
		# all continuation lines get info-colored:
		print $c_info;
	}

	if ($message_isolated && s/^($re_info_brackets(?: +$re_info_brackets)*)//) {
		print format_info($1);
	}

	# Stack trace:
	s/(\((?:trace|back ?trace|stack ?trace|call ?stack): .+?\))( |$)/format_trace($1) . $2/e;

	# Trailing Symfony JSON data:
	if ($message_isolated) {
		s/ ((?=\{")$re_json) (?=\[)/' ' . format_json($1) . ' '/e;
		s/( \[\])$/format_info($1)/e;
	}

	# JSON-only line:
	if (!$message_isolated) {
		s/^((?=\{")$re_json)$/ format_json($1, '') /e;
	}

	print;
	print $suffix;
	flush STDOUT;
}

