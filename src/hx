#!/usr/bin/env perl
use Time::HiRes qw(ualarm);
use Scalar::Util qw(blessed);
use strict;

BEGIN {
	$0 =~ m#^(.*/)[^/]+$#;
	unshift @INC, $1, '/usr/local/lib/hx-modules/';
}

use Const;
use Regexes;
use Token qw(:types);
use Color;
use Output;
use Settings;


## Runtime configuration:  #####################################################

use constant {
	M_DEFAULT => 0,
	M_LEXER   => 1,
	M_PRINTER => 2,
};

my $mode = M_DEFAULT;
my $raw = 0;

foreach (@ARGV) {
	if    ($_ eq '--lexer')   { shift @ARGV; $mode = M_LEXER }
	elsif ($_ eq '--printer') { shift @ARGV; $mode = M_PRINTER }
	elsif ($_ eq '--ecma48')  { shift @ARGV; use_ecma48_colors() }
	elsif ($_ eq '--raw')     { shift @ARGV; $raw = 1 }
}

read_color_defs($ENV{'HX_COLORS'})  if (defined $ENV{'HX_COLORS'} && $ENV{'HX_COLORS'} ne '');
read_settings($ENV{'HX_SETTINGS'} // undef);


## Output configuration:  ######################################################

sub nowarn (&;@) { local $SIG{__WARN__} = sub { }; $_[0]->(@_) }

our $linestart;
our $metalinestart;
our $contlinestart;
$linestart     = ($c_sym     . $linestart     . $c0)  if $linestart ne '';
$contlinestart = ($c_contsym . $contlinestart . $c0)  if $contlinestart ne '';
$metalinestart = ($c_meta    . $metalinestart . $c0)  if $metalinestart ne '';

# As soon as the <> read pauses for more than 200ms, we print a separator line.
# This serves to separate "tail -f"'s past output from future output.
# This only happens once.
# This only happens if there was some previous output (we don't need in case of "tail -f -n0").
our $do_linesep;  # Line separator pause time (ms). See Settings.pm.
our $str_linesep;  # Line separator character. See Settings.pm.
my $rpt_linesep;

{
	local $str_linesep = $str_linesep;
	utf8::decode($str_linesep);
	my $len_linesep = length $str_linesep;
	my $width = int(`tput cols 2>/dev/null` || 80);
	$rpt_linesep = $width / $len_linesep;
}

my $followsep = $c_followsep . ($str_linesep x $rpt_linesep) . "${c0}\n";


## Line-separator functions:  ##################################################

my $had_output = 0;  # true after some visible input has been printed

sub stop_linesep_wait () {
	return unless $do_linesep;
	ualarm(0);
	$SIG{'ALRM'} = 'DEFAULT';
}

sub start_linesep_wait () {
	return unless $do_linesep;
	$SIG{'ALRM'} = sub {
		stop_linesep_wait();
		undef $do_linesep;
		print $followsep  if $had_output;
	};
	ualarm($do_linesep * 1000);
}


## Main program entry point:  ##################################################

if ($mode == M_LEXER) {
	while (my @tokens = lex_next_line(scalar <>)) { print @tokens, "\n"; flush STDOUT; }
} elsif ($mode == M_PRINTER) {
	while (my @tokens = Token->unserialize_all(scalar <>)) { print_tokens(@tokens); flush STDOUT; }
} else {
	start_linesep_wait();
	while (my @tokens = lex_next_line(scalar <>)) {
		stop_linesep_wait();
		print_tokens(@tokens);
		flush STDOUT;
		start_linesep_wait();
	}
}


## Main input loop:  ###########################################################

sub striphttpstatus ($;$) {
	my $type = $_[1] // T_INFO;
	return unless ($_[0] =~ s/^$re_http$//);
	return (
		$+{'hs0'} ? Token->new($type, $+{'hs0'}) : undef,
		Token->new(T_HTTP_STATUS, $+{'hs'}),
		$+{'hs1'} ? Token->new($type, $+{'hs1'}) : undef,
	)
}

sub lex_next_line {
	return unless defined $_[0];
	local $_ = $_[0];

	# every non-empty line is a full log line.
	if (m/^\s*$/) {
		return Token->new(T_EMPTYLINE, $_);
	}

	my @packedlines;

	if (s/^$re_tail_filename//) {
		# `tail` file header
		return
			Token->new(T_METALINE),
			Token->new(T_MESSAGE, $+{'prefix'}),
			Token->new(T_FILENAME, $+{'filename'}),
			Token->new(T_MESSAGE, $+{'suffix'});
	}

	my $T_REST = T_MESSAGE;

	my @suffix;
	my @output;

 restofline:

	my $is_continuation_line = m/$re_continuation_line/;

	@output = ( Token->new(($is_continuation_line) ? T_CONTLINE : T_LINE) )  if !@output;

	my $is_apache;
	my $is_postfix;
	my $is_rfc5424;
	my $is_dmesg;
	my $is_nginx_fastcgi;
	my $client_follows;

	my ($message_isolated, $loglevel_isolated, $exception_isolated, $text_isolated);

	# The start is probably the timestamp:
	if (s/^($re_ddd {1,2}$re_time) ($re_host) ($re_app)(: *)//) {
		# syslog format
		push @output,
			Token->new(T_DATE, $1 . ' ', format => 'syslog'),
			Token->new(T_HOST, $2 . ' '),
			Token->new(T_APP, $3 . $4);
		$client_follows = 1  if ($3 =~ m/^(?:named|bind9?)\b/);
		$is_postfix = 1  if ($3 =~ m/^postfix/);
		$message_isolated = 1;
	} elsif (s/^($re_ddd {1,2}$re_time) ($re_host) (\d+) ($re_ts8601) ($re_host) ($re_app|-) (\d+|-) (\S+) //) {
		# syslog RFC-5424 format
		push @output,
			Token->new(T_DATE, $1 . ' ', format => 'syslog'),
			Token->new(T_HOST, $2 . ' '),
			Token->new(T_INFO, $3 . ' '),
			Token->new(T_DATE, $4 . ' ', format => '8601'),
			Token->new(T_HOST, $5 . ' '),
			Token->new(T_APP,  $6 . ' ', type => 'rfc-5424-tag'),
			Token->new(T_APP,  $7 . ' ', type => 'pid'),  # PID
			Token->new(T_INFO, $8 . ' ');  # msgid
		$message_isolated = 1;
		$is_rfc5424 = 1;
	} elsif (s/^($re_sects) ($re_app: )//) {
		push @output,
			Token->new(T_DATE, $1 . ' '),
			Token->new(T_APP, $2);
	} elsif (s/^(\[(?:$re_ymd $re_time|$re_ts8601)\]) ($re_app)(\.[A-Z]+)?(: *)//) {
		# symfony format
		push @output,
			Token->new(T_DATE, $1 . ' '),
			Token->new(T_APP, $2),
			Token->new(T_LOGLEVEL, $3 . $4, read_loglevel($3));
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^(\[$re_word $re_word \d+ $re_time$re_ms? \d{4}\]) +(\[\w*:\w+\]) +(\[(?:pid )?\d+(?:[,:]tid \d+)?\]) +($re_a2clnt )?//) {
		# Apache2 error format
		push @output, Token->new(T_DATE,     $1 . ' ');
		push @output, Token->new(T_LOGLEVEL, $2 . ' ', read_loglevel($2));
		push @output, Token->new(T_APP,      $3 . ' ');
		push @output, Token->new(T_INFO,     $4)  if $4;
		$is_apache = 1;
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^(?<vh>$re_client(?::\d+)?) (?<cl>$re_client|-) (?<id>\S+) (?<un>\S+) (?<ts>$re_a2date) (?=")// ||
	         s/^(?<cl>$re_client|-) (?<id>\S+) (?<un>\S+) (?<ts>$re_a2date) (?=")//) {
		# Apache2 custom format
		push @output, Token->new(T_HOST, $+{'vh'} . ' ', type => 'vhost')  if $+{'vh'};
		push @output,
			Token->new(T_CLIENT, $+{'cl'} . ' '),  # client addr/hostname
			Token->new(T_USERNAME, $+{'id'} . ' ', type => 'ident'),  # identd logname
			Token->new(T_USERNAME, $+{'un'} . ' ', type => 'basic'),  # http basic username
			Token->new(T_DATE, $+{'ts'} . ' ', format => 'a2');
		$is_apache = 1;
		$message_isolated = 1;
	} elsif (s/^($re_ts8601) (\d+) (\[\w+\]) ($re_mysqld)?// ||
		 s/^(${re_ymd} ${re_time}) (\d+) (\[\w+\]) ($re_mysqld)?//) {
		# mysqld error:
		push @output, Token->new(T_DATE, $1 . ' ', format => '8601');
		push @output, Token->new(T_INFO, $2 . ' ');
		push @output, Token->new(T_LOGLEVEL, $3 . ' ', read_loglevel($3));
		push @output, Token->new(T_APP, $4)  if $4;
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^($re_dmesg_ts) ($re_dmesg_app:|\[$re_dmesg_app\])( |$)//) {
		# dmesg
		push @output,
			Token->new(T_DATE, $1 . ' ', format => 'dmesg'),
			Token->new(T_APP, $2 . $3);
		$message_isolated = 1;
		$is_dmesg = 1;
	} elsif (s/^($re_dmesg_ts) //) {
		# dmesg (other)
		push @output, Token->new(T_DATE, $1 . ' ', format => 'dmesg');
		$is_dmesg = 1;
	} elsif (s/^(Next) ($re_exception)(: )//) {
		# Euv continuation:
		push @output,
			Token->new(T_DATE, $1 . ' '),
			Token->new(T_ERROR, $2),
			Token->new(T_MESSAGE, $3);
		$message_isolated = 1;
	} elsif (s/^(PHP Fatal error: )( ?Uncaught (?:PHP Exception )?)($re_exception)//) {
		push @output,
			Token->new(T_APP, $1),
			Token->new(T_MESSAGE, $2),
			Token->new(T_ERROR, $3);
		$message_isolated = 1;
	} elsif (s/^($re_ymd $re_time(?:,\d+)?:)($re_loglevel:)([^:]+:)//) {
		# LetsEncrypt/certbot
		push @output,
			Token->new(T_DATE, $1),
			Token->new(T_LOGLEVEL, $2, read_loglevel($2)),
			Token->new(T_APP, $3);
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^($re_ymd $re_time(?:,\d+)?)( - )(\w[^\[]*)(\[$re_loglevel\]: )//) {
		# cloud-init
		push @output,
			Token->new(T_DATE, $1 . $2),
			Token->new(T_APP, $3),
			Token->new(T_LOGLEVEL, $4, read_loglevel($4));
		$message_isolated = 1;
		$loglevel_isolated = 1;
	} elsif (s/^($re_ymd $re_time$re_ms? )(\[$re_loglevel\] )?(\d+(?:#\d+)?: )(\*\d+ ?)?(FastCGI sent in (?:stderr|stdout): )(")//i) {
		# nginx + fastcgi
		push @output, Token->new(T_DATE, $1);
		push @output, Token->new(T_LOGLEVEL, $2, read_loglevel($2))  if $2;
		push @output, Token->new(T_APP, $3);
		push @output, Token->new(T_INFO, $4)  if $4;
		push @output, Token->new(T_WRAP, $5 . ($6 // ''));
		$is_nginx_fastcgi = 1;
		$message_isolated = 1;
		$loglevel_isolated = 1  if $2;
		if (s/(")((?: while reading response header from upstream)?, client: ${re_client}, (?:server:|request:).*)$//s) {
			# end of fastcgi message should not affect main message parsing, it's a mostly boring wrapper -- so cut it out and put it into $suffix
			unshift @suffix, Token->new(T_WRAPEND, $1 . $2);
		}
	} elsif (s/^(\[$re_dmdty\] )($re_client(?::\d+)? )(?:($re_http)(?<suffix>: ))?//) {
		# "php -S" log format
		my ($info, $suffix) = ($3, $+{'suffix'});
		push @output,
			Token->new(T_DATE, $1),
			Token->new(T_CLIENT, $2);
		push @output, striphttpstatus($info)  if $info;
		push @output, Token->new(T_INFO, ($info . $suffix))  if ($info || $suffix);
	} elsif (s/^($re_loglevel:? )(<[^>]+>,? ?)(\[(?:Error|Errno) [^\]]+\] )?//) {
		push @output, Token->new(T_LOGLEVEL, $1, read_loglevel($1));
		push @output, Token->new(T_APP, $2);
		push @output, Token->new(T_ERROR, $3)  if $3;
		$message_isolated = 1;
	} elsif (s/^($re_ymd $re_time$re_ms?|($re_ts8601)|$re_tsw|\[$re_tsw\]|$re_sects|\[$re_ymd $re_time$re_ms?\]|$re_dmdty|\[$re_dmdty\])( |:|$)//) {
		my %attr = ($2) ? (type => '8601') : ();
		push @output, Token->new(T_DATE, $1 . $3);
		$message_isolated = 1;
	}

	if ($is_dmesg && s/^((-{3,}) ?[\[\(].+[\]\)] ?-{3,}\s*)//) {
		push @output, Token->new(T_INFO, $1, type => 'dmesg-separator');
	} elsif (s/^$re_repeat_begin//) {
		push @output, Token->new(T_REPEAT, $+{'prefix'}, n => $+{'n'});
		push @output, Token->new(T_MESSAGE, $+{'rest'});
		if (s/($re_repeat_end)$//) {
			unshift @suffix, Token->new(T_REPEATEND, $1);
		}
	}

	if ($message_isolated && !$loglevel_isolated && s/^(<$re_loglevel>  ?|\[$re_loglevel\][: ]|$re_loglevel:  ?)//) {
		push @output, Token->new(T_LOGLEVEL, $1, read_loglevel($1));
		$loglevel_isolated = 1;
	} elsif ($message_isolated && !$loglevel_isolated && s/^($re_loglevel +)(\[\S+\]) ([a-z]+(?:\.\w+)+ )?//) {
		# LOGLEVEL [component] org.java.classname
		push @output, Token->new(T_LOGLEVEL, $1, read_loglevel($1));
		push @output, Token->new(T_APP, $2 . ' ');
		push @output, Token->new(T_INFO, $3)  if $3;
		$loglevel_isolated = 1;
	} elsif ($message_isolated && !$loglevel_isolated && s/^($re_loglevel +)(\w[\w\.]*: )//) {
		# LOGLEVEL componentname:
		push @output, Token->new(T_LOGLEVEL, $1, read_loglevel($1));
		push @output, Token->new(T_APP, $2);
		$loglevel_isolated = 1;
	} elsif ($message_isolated && !$loglevel_isolated && s/^($re_loglevel +)(\($re_path$re_lineno?\): )//) {
		# LOGLEVEL (FILENAME.PY:LINENO):
		push @output, Token->new(T_LOGLEVEL, $1, read_loglevel($1));
		push @output, Token->new(T_INFO, $2);
		$loglevel_isolated = 1;
	}
	
	if (s/^(###!!! *)//) {
		# gnome error info prefix
		push @output, Token->new(T_INFO, $1);
	}

	if ($message_isolated && $client_follows && s/^( *(?:client )?$re_ip(?:[:#]\d{1,5})?(?:[:,] ?)?)//) {
		push @output, Token->new(T_CLIENT, $1);

		if (s/(^ \([^\]]*\)[:,] ?)//) {
			push @output, Token->new(T_INFO, $1);
		}
	}

	my $re_info_brackets = '(?:\\[[^\\]]+\\])';
	if (s/^((?=\[?\{")$re_json)$//) {
		# JSON-only line:
		push @output, Token->new(T_JSON, $1);
	} elsif ($message_isolated && s/^($re_info_brackets(?: *$re_info_brackets)*)( *)//) {
		my %attr = ($is_rfc5424) ? (type => 'rfc-5424-sd') : ();
		push @output, Token->new(T_INFO, $1, %attr);
		push @output, Token->new(T_MESSAGE, $2);
	} elsif ($message_isolated && $is_rfc5424 && s/^(-) //) {
		# RFC5424 with empty Structured Data field
		push @output, Token->new(T_INFO, $1 . ' ');
	}

	if ($message_isolated && !$loglevel_isolated && s/^(<$re_loglevel>  ?|$re_loglevel:  ?|$re_loglevel +- )//) {
		push @output, Token->new(T_LOGLEVEL, $1, read_loglevel($1));
		$loglevel_isolated = 1;
	}

	if ($message_isolated && s/^( *(?:PHP message:  ?)?(?:PHP Fatal error:  ?)?(?:Uncaught (?:PHP )?(?:Exception )?)?)($re_exception)(: +)//) {
		push @output, Token->new(T_MESSAGE, $1)  if $1;
		push @output, Token->new(T_ERROR, $2);
		push @output, Token->new(T_MESSAGE, $3);
		$exception_isolated = 1;
	}

	if ($message_isolated && s/^(.*? )(Stack trace: .*)$/$1/s) {
		my $rest = $2;
		@packedlines =
			map { (Token->new(T_PACKEDLINE), $_) }
				split(/(?=#\d+ |Stack trace: |Next $re_exception)/, $rest);
		$T_REST = T_INFO;
	}

	if ($message_isolated && $is_apache && s/^($re_a2err:) //) {
		# apache2: "AH01620: Could not open..."
		push @output, Token->new(T_ERROR, $1 . ' ');
		$exception_isolated = 1;
	} elsif ($message_isolated && $is_apache && s/^((?:\(\d+\))?\w+(?: \w+)*: )($re_a2clnt )?($re_a2err:) //) {
		# apache2: "(13)Permission denied: [client 00.000.000.00:0000] AH01620: Could not open..."
		push @output, Token->new(T_MESSAGE, $1);
		push @output, Token->new(T_MESSAGE, $2)  if $2;
		push @output, Token->new(T_ERROR, $3 . ' ');
		$exception_isolated = 1;
	}

#	if ($message_isolated && s/^((?:$re_info_brackets +)+)//) {
#		push @output, Token->new(T_INFO, $1);
#	}

	if ($message_isolated && s#^(.+?)(  ?\(stack: .+\))?( \($re_exception (?:@|at|in) $re_path$re_lineno?\))##) {
		# AEH format
		my ($message, $stack, $rest, $info) = ($1, $2, $3, undef);
		if ($message =~ s/((?:  ?$re_info_brackets)+)$//) { $info = $1; }
		push @output, Token->new(T_MESSAGE, $message);
		if ($info =~ m/^(?<prefix>.* )(?<rest>${re_http} *)$/) {
			# striphttpstatus only works on prefixes, but here we might have http suffixes as well:
			push @output, Token->new(T_INFO, $+{'prefix'})  if $+{'prefix'};
			$info = $+{'rest'};
		}
		push @output, striphttpstatus($info)  if $info;
		push @output, Token->new(T_INFO, $info)  if $info;
		push @output, Token->new(T_STACK, $stack)  if $stack;
		push @output, Token->new(T_TRACE, $rest)  if $rest;
		$text_isolated = 1;
	} elsif ($message_isolated &&
			(s#^(.+?)( (?:in|at)(?: file:?)? ${re_path}${re_lineno}?\b)(\s*$)## ||
			 s#^(.+?)([:,\.] [Ff]ile:? ${re_path}${re_lineno}?)(\s*$)##)) {
		# "MESSAGE in FILE:LINE" format
		# "MESSAGE: file FILE:LINE" format
		push @output, Token->new(T_MESSAGE, $1);
		push @output, Token->new(T_TRACE, $2);
		push @output, Token->new(T_MESSAGE, $3)  if $3;
		$text_isolated = 1;
	} elsif ($message_isolated && s#^(.+?)(?:(  ?)($re_info_brackets))?(  ?(?:in|at) ${re_abspath}${re_lineno}?\b {1,2})(?=[\(\[])##) {
		# mini-api format
		my ($prefix, $info, $trace) = ($1 . $2, $3, $4);
		push @output, Token->new(T_MESSAGE, $prefix);
		push @output, striphttpstatus($info)  if $info;
		push @output, Token->new(T_INFO, $info)  if $info;
		push @output, Token->new(T_TRACE, $trace);
		$text_isolated = 1;
	} elsif ($message_isolated && s#("[A-Z]\w* [^"]+?") (\d+)( .*)$##) {
		# Apache2 log
		push @output, Token->new(T_MESSAGE, $1 . ' ');
		push @output, Token->new(T_HTTP_STATUS, $2);
		push @output, Token->new(T_INFO, $3);
		$text_isolated = 1;
	} elsif ($message_isolated && $is_postfix) {
		if (s/^( *[0-9A-Z]+: +)//) {
			push @output, Token->new(T_MESSAGE, $1);
			while (s/^(, ?)?($re_kv)//) {
				push @output, Token->new(T_MESSAGE, $1)  if $1;
				push @output, Token->new(T_KV, $2, k => $+{'k'}, src => 'postfix');
			}
		}
	} elsif ($message_isolated && s#^$re_cron_cmd##) {
		# Cron syslog entry: (username) CMD ( cmd)
		push @output,
			Token->new(T_USERNAME, $+{'user'}),
			Token->new(T_INFO, $+{'prefix'});
		unshift @suffix,
			Token->new(T_INFO, $+{'suffix'});
		$_ = $+{'cmd'}
	} elsif ($message_isolated && s#^((?:file )?${re_abspath}${re_lineno}?)(:)##) {
		push @output,
			Token->new(T_TRACE, $1),
			Token->new(T_INFO, $2);
	} elsif ($message_isolated && s/^(\s*#\d+ $re_memaddr [IiBb]  +)(?:($re_path$re_lineno)(?:( \(0x[0-9a-f]{6,} ?@ ?\d+\))?))?//) {
		push @output, Token->new(T_INFO, $1);
		push @output, Token->new(T_MESSAGE);
		push @output, Token->new(T_TRACE, $2)  if $2;
		push @suffix, Token->new(T_INFO, $3)  if $3;
	}


	if ($is_continuation_line && s/^(#\d+ )?(?:(${re_abspath}${re_lineno}?|\[internal function\])(: ))?($re_fncall|\{main\})//) {
		push @output, Token->new(T_INFO, $1)  if $1;
		push @output, Token->new(T_TRACE, $2)  if $2;
		push @output, Token->new(T_INFO, $3)  if $3;
		push @output, Token->new(T_FNCALL, $4);
	} elsif ($is_continuation_line) {
		# all continuation lines get info-colored:
		push @output, Token->new(T_MESSAGE);
		$T_REST = T_INFO;
	}

	if ($message_isolated && s/^($re_info_brackets(?: +$re_info_brackets)*)//) {
		my $info = $1;
		push @output, striphttpstatus($info)  if $info;
		push @output, Token->new(T_INFO, $info)  if $info;
	}

	# Stack trace:
	if (s/^(.*?)(\((?:trace|back ?trace|stack ?trace|call ?stack): .+?\))( |$)//) {
		push @output, Token->new(T_MESSAGE, $1)  if $1;
		push @output, Token->new(T_TRACE, $2);
		push @output, Token->new(T_MESSAGE, $3)  if $3;
	}

	# Trailing Symfony JSON data:
	if ($message_isolated && s/((?=\{")$re_json) (?<rest>\[[^\]]*\] *$)//) {
		unshift @suffix,
			Token->new(T_JSON, $1),
			Token->new(T_INFO, ' ' . $+{'rest'});
	}

#	# JSON-only line:
#	if (!$message_isolated && s/^((?=\{")$re_json)$//) {
#		push @output, Token->new(T_JSON, $1);
#	}

	if ($message_isolated && $is_postfix && s/(\s*\(.+\))$//) {
		unshift @suffix, Token->new(T_INFO, $1, type => 'postfix-suffix');
	}

	if (s/([\r\n]+)$//) { push @suffix, Token->new(T_EOL, $1) }
	push @output, Token->new($T_REST, $_)  unless $_ eq '';

	if (@packedlines) {
		# The line is not actually finished now,
		# we've previously detected that this is a packed line.
		# Get the next part and prepare to format that:
		$_ = shift @packedlines;
		while (blessed($_) eq 'Token') {
			push @output, $_;
			$_ = shift @packedlines
		}
		goto restofline;  # continue collecting @output and @suffix...
	}

	( @output, @suffix )
}


## Main output loop:  ##########################################################

sub print_tokens (@) {
	return unless defined $_[0];

	my ($last_line_token, $had_message, $is_packedline);
	foreach my $token (@_) {

		if ($raw) {
			print $token->content();
		} else {
			print format_token($token, line => $last_line_token, had_message => $had_message, packedline => $is_packedline);
			$had_message = 1  if (!$had_message && $token->is(T_MESSAGE));
			$is_packedline = 1  if (!$is_packedline && $token->is(T_PACKEDLINE));
		}

		$had_output = 1;

		if (!$last_line_token && $token->is_line()) { $last_line_token = $token }
	}

	1
}

